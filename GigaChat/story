Биек таулар һәм чиксез дала арасында урнашкан кечкенә үзбәк авылының үзәгендә матур бакча (бакча) булган. Бу бакча үзәгендә ялтырап торган Гүл күле бар иде. Авыл халкы күлнең сихри булуына һәм аның суларында су коенырга батырчылык иткән һәркемнең теләсә нинди теләген үтәргә сәләтле булуына ышанган. Бервакыт батыр малай күлнең көчен сынап карарга булган. Ул салкын суга чумды, уртага кадәр йөзде һәм теләк әйтте. Ул судан чыккач, кулында алтын алма була. Шул көннән бирле авылда ризыкка кытлык булмады, һәм малайны герой дип игълан иттеләр.
Варианты:
1. Але, бер вакытта, бакчачы (бакчачы) яшелчә (яшелчә) булды. Авыл халкы бу үзгәрешне күреп, күлнең сихры булуына ышанулары кемерелде.
2. Алтын алма булган малайның бакчачысы булуына карар бирде. Ул бакчасында яшелчә алмалар һәм башка мәйле мәвеләр өстәде.

from fastapi import FastAPI
import base64
import uvicorn
from pydantic import BaseModel
from typing import List, Dict, Any
from tatar_assistant import TatarAssistant
from asr import ASR
from T5 import T5
import wave
app = FastAPI()

assistant = TatarAssistant()
asr=ASR()
#t5=T5(model_name="")

class StoryGet(BaseModel):
    level: int
    prev_text: int
    words: List[str]

class StoryReturn(BaseModel):
    new_text: str
    options: List[str]

class Chat(BaseModel):
    user_message: str

class Asr_data(BaseModel):
    audio: str
    text: str

prevka = ""
prev_story_sad = ""
prev_story_happy = ""


@app.post("/story/", response_model=StoryReturn)
def story(message: StoryGet):
    global prevka, prev_story_sad, prev_story_happy
    response = ""
    ru_words = assistant.translate_words(message.words)
    if message.prev_text == 0:
        prevka = prev_story_sad
    else:
        prevka = prev_story_happy

    if message.level == 1:
        response = assistant.generate_first_text(ru_words[:2])
        prev_story_sad = assistant.generate_sad_contin(ru_words[2:4], response)
        prev_story_happy = assistant.generate_happy_contin(ru_words[2:4], response)
    if message.level == 2:
        response = prevka
        prev_story_sad = assistant.generate_sad_end(ru_words[-2:], response)
        prev_story_happy = assistant.generate_happy_end(ru_words[-2:], response)
    if message.level == 3:
        response = prevka
        prev_story_sad = ""
        prev_story_happy = ""

    answer_sad = assistant.take_first_sent(prev_story_sad)
    answer_happy = assistant.take_first_sent(prev_story_happy)
    prevka = response

    response_data = {
        "new_text": response,
        "options": [answer_sad, answer_happy]
    }
    return response_data


@app.post("/story_cont/", response_model=StoryReturn)
def story(message: StoryGet):
    global prevka, prev_story_sad, prev_story_happy
    response = ""
    ru_words = assistant.translate_words(message.words)
    if message.prev_text == 0:
        prevka = prev_story_sad
    else:
        prevka = prev_story_happy

    if message.level == 1:
        prev_story_sad = assistant.generate_sad_contin(ru_words[2:4], prevka)
        prev_story_happy = assistant.generate_happy_contin(ru_words[2:4], prevka)
    if message.level == 2:
        prev_story_sad = assistant.generate_sad_end(ru_words[-2:], prevka)
        prev_story_happy = assistant.generate_happy_end(ru_words[-2:], prevka)
    if message.level == 3:
        prev_story_sad = ""
        prev_story_happy = ""

    answer_sad = assistant.take_first_sent(prev_story_sad)
    answer_happy = assistant.take_first_sent(prev_story_happy)

    response_data = {
        "new_text": response,
        "options": [answer_sad, answer_happy]
    }
    return response_data



@app.post("/chat/", response_model=Dict[str, Any])
def chat(message: Chat):
    response = assistant.chat(message.user_message)
    response_data = {
        "answer": response,
    }
    return response_data


@app.post("/asr/", response_model=Dict[str, Any])
def asr_feedback(data: Asr_data):
    text = data.text
    base64_audio= base64.b64decode(data.audio)
    output_file = "output.wav"
    with wave.open(output_file, 'wb') as wf:
        wf.setnchannels(1)  # Установите количество каналов (1 для моно, 2 для стерео)
        wf.setsampwidth(2)  # Установите ширину выборки в байтах (2 для 16 бит)
        wf.setframerate(44100)  # Установите частоту дискретизации (например, 44100 Гц)
        wf.writeframes(base64_audio)
    response = ASR.asr(output_file, text)
    response_data = {
        "answer": response,
    }
    return response_data

@app.post("/esse_cost/", description="это костыль для эссе, использует только гпт", response_model=Dict[str, Any])
def check_esse_cost(message: Chat):
    msg = "Проверь и откоректируй следующее эссе на наличие грамматических, орфографических, пунктуационных и семантических ошибок на русском: " + message.user_message
    response_errors = assistant.chat(msg)
    # msg_recense = "Напиши небольшую рецензию на эссе, обрати внимание на его смысл, расстановку акцентов, текст должен быть не слишком коротким: " + message.user_message
    response_recense = assistant.get_feedback(len(message.user_message))
    response_data = {
        "answer": "Небольшая рецензия: \n" + response_recense + "\n\n" + "Исправленный текст:\n" + response_errors,
    }
    return response_data

@app.post("/esse/", description="пока не работает",response_model=Dict[str, Any])
def check_esse(message: Chat):
    response_t5 = t5.inference(message.user_message)
    feedback = assistant.get_feedback()
    response = feedback + "\n" + response_t5
    response_data = {
        "answer": response,
    }
    return response_data

@app.get("/healthcheck", tags=["healthcheck"])
def healthcheck():
    return {"status": "ok"}

if __name__ == "__main__":
    uvicorn.run(app, port=8000)

